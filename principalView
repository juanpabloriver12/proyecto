package com.miempresa.proyecto;

import java.util.ArrayList;
import java.util.List;

// Importaciones de componentes de Vaadin
import com.vaadin.flow.component.*;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.html.IFrame;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.StreamResource;
import com.vaadin.flow.component.textfield.IntegerField;

// Ruta y título de la vista
@Route("principal")
@PageTitle("MEDIAVERSO")

public class principalView extends VerticalLayout {

    // Componentes del formulario
    private TextField urlMediaField = new TextField("URL de imagen o video");
    private Grid<MultimediaItem> grid = new Grid<>(MultimediaItem.class); // Tabla
    private Component mediaPreview = new Text(""); // Vista previa vacía
    private TextField tituloField = new TextField("Título");
    private ComboBox<String> generoCombo = new ComboBox<>("Género");
    private IntegerField calificacionField = new IntegerField("Calificación (1 a 5)");
    private com.vaadin.flow.component.checkbox.Checkbox prestadoCheckbox = new com.vaadin.flow.component.checkbox.Checkbox("Prestado");
    private List<MultimediaItem> listaMultimedia = new ArrayList<>();
    private TextField busqueda = new TextField("Buscar");
    private Button botonFiltrar = new Button("Filtrar");
    private TextField descripcionField = new TextField("Descripción");

    public principalView() {

        // Configuración inicial del layout
        tituloField.setPlaceholder("Escribe el título aquí...");
        setSizeFull();
        getStyle().set("background-color", "black");

        // Encabezado con imagen/logo
        HorizontalLayout encabezado = new HorizontalLayout();
        encabezado.setAlignItems(FlexComponent.Alignment.CENTER);
        StreamResource logo = new StreamResource("logo.png", () -> getClass().getResourceAsStream("/images/logo.png"));
        Image imgLogo = new Image(logo ,"logo");
        imgLogo.setWidth("300px");  
        imgLogo.setHeight("300px");
        add(encabezado);
        add(imgLogo);

        // Estilo de alineación general
        setJustifyContentMode(JustifyContentMode.CENTER); 
        setAlignItems(Alignment.CENTER);
        setPadding(true);
        setSpacing(true);

        // Título principal
        H1 titulo = new H1("MEDIAVERSO");
        titulo.getStyle().set("color", "blue").set("font-family", "'Courier New', Courier, monospace")
            .set("font-size", "4em");

        // Filtro de género
        ComboBox<String> filtroGeneroCombo = new ComboBox<>("Filtrar por género");
        filtroGeneroCombo.setItems("Musica", "Libros", "Peliculas", "Series", "Documentales");
        filtroGeneroCombo.setPlaceholder("Todos los géneros");
        filtroGeneroCombo.addValueChangeListener(e -> aplicarFiltroGenero(filtroGeneroCombo.getValue()));

        // Configuración de campos del formulario
        generoCombo.setItems("Musica", "Libros", "Peliculas", "Series", "Documentales");
        generoCombo.setPlaceholder("Seleccionar género");
        calificacionField.setMin(1);
        calificacionField.setMax(5);
        calificacionField.setErrorMessage("La calificación debe estar entre 1 y 5");
        calificacionField.setRequiredIndicatorVisible(true);
        tituloField.setRequiredIndicatorVisible(true);
        generoCombo.setRequiredIndicatorVisible(true);
        urlMediaField.setPlaceholder("https://ejemplo.com/video.mp4 o imagen.jpg");
        urlMediaField.setClearButtonVisible(true);

        // Fila 1: Título, Género, Calificación
        HorizontalLayout fila1 = new HorizontalLayout(tituloField, generoCombo, calificacionField);

        // Botones principales
        Button agregarButton = new Button("Agregar");
        agregarButton.getStyle().set("color", "green");

        Button eliminarButton = new Button("Eliminar");
        eliminarButton.getStyle().set("color", "red");

        Button estadisticasButton = new Button("Estadísticas");

        // Acción botón estadísticas
        estadisticasButton.addClickListener(e -> {
            if (listaMultimedia.isEmpty()) {
                Notification.show("No hay elementos en la lista", 3000, Notification.Position.MIDDLE);
                return;
            }
            MultimediaItem mejor = listaMultimedia.stream()
                .max((a, b) -> Integer.compare(a.getCalificacion(), b.getCalificacion()))
                .orElse(null);
            if (mejor != null) {
                Dialog dialogo = new Dialog();
                dialogo.setHeaderTitle("ELEMENTO CON MEJOR PUNTUACION");
                VerticalLayout contenido = new VerticalLayout(
                    new Span("Título: " + mejor.getTitulo()),
                    new Span("Género: " + mejor.getGenero()),
                    new Span("Calificación: " + mejor.getCalificacion()),
                    new Span("Descripción: " + mejor.getDescripcion()),
                    new Span("URL: " + mejor.getUrl())
                );
                Button cerrar = new Button("Cerrar", event -> dialogo.close());
                dialogo.add(contenido, cerrar);
                dialogo.open();
            }
        });

        // Fila 2: Prestado, URL, Botón agregar
        HorizontalLayout fila2 = new HorizontalLayout(prestadoCheckbox, urlMediaField, agregarButton);
        fila2.setAlignItems(FlexComponent.Alignment.END);
        fila2.setWidthFull();

        // Descripción
        HorizontalLayout descripcionLayout = new HorizontalLayout(descripcionField);
        descripcionLayout.setWidthFull();

        // Formulario completo
        HorizontalLayout formulario = new HorizontalLayout(fila1, fila2);
        HorizontalLayout botonesLayout = new HorizontalLayout(prestadoCheckbox, agregarButton, eliminarButton, estadisticasButton);
        botonesLayout.setJustifyContentMode(JustifyContentMode.CENTER);
        botonesLayout.setAlignItems(Alignment.CENTER);
        botonesLayout.setSpacing(true);
        formulario.add(fila1, fila2, descripcionLayout, botonesLayout);
        add(formulario);

        // Acción botón agregar
        agregarButton.addClickListener(e -> agregarMultimedia());

        // Acción botón eliminar
        eliminarButton.addClickListener(e -> {
            MultimediaItem seleccionado = grid.asSingleSelect().getValue();
            if (seleccionado != null) {
                listaMultimedia.remove(seleccionado);
                grid.setItems(listaMultimedia);
                Notification.show("Elemento eliminado");
            } else {
                Notification.show("Seleccione un elemento para eliminar", 3000, Notification.Position.MIDDLE);
            }
        });

        // Configuración del grid (tabla)
        grid.asSingleSelect();
        grid.setSelectionMode(Grid.SelectionMode.SINGLE);
        grid.getElement().getThemeList().add("row-stripes");

        // Estilo oscuro del grid
        grid.getElement().executeJs("""
            if (!document.getElementById('dark-grid-style')) {
                const style = document.createElement('style');
                style.id = 'dark-grid-style';
                style.innerHTML = `
                    vaadin-grid::part(cell) {
                        background-color: #121212 !important;
                        color: white !important;
                    }
                    vaadin-grid::part(header-cell) {
                        background-color: #1e1e1e !important;
                        color: white !important;
                    }
                    vaadin-grid {
                        background-color: #121212 !important;
                        color: white !important;
                    }
                `;
                document.head.appendChild(style);
            }
        """);

        // Columnas del grid
        grid.removeAllColumns();
        grid.addColumn(MultimediaItem::getTitulo).setHeader("Título");
        grid.addColumn(MultimediaItem::getGenero).setHeader("Género");
        grid.addColumn(MultimediaItem::getCalificacion).setHeader("Calificación");
        grid.addColumn(item -> item.isEstadoPrestamo() ? "Sí" : "No").setHeader("Estado Préstamo");

        // Columna con miniatura y botón Ver
        grid.addComponentColumn(item -> {
            HorizontalLayout contenedor = new HorizontalLayout();

            // Miniatura según el tipo de URL
            if (item.getUrl().contains("youtube.com") || item.getUrl().contains("youtu.be")) {
                String videoId = extraerYoutubeId(item.getUrl());
                if (!videoId.isEmpty()) {
                    String thumbnailUrl = "https://img.youtube.com/vi/" + videoId + "/0.jpg";
                    Image img = new Image(thumbnailUrl, "Miniatura");
                    img.setWidth("80px");
                    contenedor.add(img);
                }
            } else if (item.getUrl().endsWith(".jpg") || item.getUrl().endsWith(".png")) {
                Image img = new Image(item.getUrl(), "Miniatura");
                img.setWidth("80px");
                contenedor.add(img);
            }

            // Botón "Ver"
            Button ver = new Button("Ver", VaadinIcon.EYE.create());
            ver.addClickListener(e -> {
                Dialog dialog = new Dialog();
                dialog.setHeaderTitle("Vista previa");
                VerticalLayout content = new VerticalLayout();
                content.add(new Span("Título: " + item.getTitulo()));
                content.add(new Span("Género: " + item.getGenero()));
                content.add(new Span("Calificación: " + item.getCalificacion()));
                content.add(new Span("Descripción: " + item.getDescripcion()));
                Span prestadoSpan = new Span("Prestado: " + (item.isEstadoPrestamo() ? "Sí" : "No"));
                content.add(prestadoSpan);
                prestadoSpan.getStyle().set("color", item.isEstadoPrestamo() ? "green" : "red");

                // Vista previa multimedia
                String url = item.getUrl();
                if (url.contains("youtube.com") || url.contains("youtu.be")) {
                    String videoId = extraerYoutubeId(url);
                    String embedUrl = "https://www.youtube.com/embed/" + videoId;
                    IFrame iframe = new IFrame(embedUrl);
                    iframe.setWidth("560px");
                    iframe.setHeight("315px");
                    iframe.getElement().setAttribute("allowfullscreen", true);
                    content.add(iframe);
                } else if (url.endsWith(".jpg") || url.endsWith(".png")) {
                    Image img = new Image(url, "Vista previa");
                    img.setWidth("400px");
                    content.add(img);
                } else {
                    content.add(new Span("Formato no compatible."));
                }

                Button cerrar = new Button("Cerrar", event -> dialog.close());
                content.add(cerrar);
                dialog.add(content);
                dialog.setWidth("600px");
                dialog.open();
            });

            contenedor.add(ver);
            return contenedor;
        }).setHeader("Ver");

        // Agrega todo a la vista
        add(titulo, filtroGeneroCombo, formulario, grid);
        cargarDatosEjemplo(); // Cargar datos (vacío al principio)
    }

    // Carga inicial de datos (vacío)
    private void cargarDatosEjemplo() {
        grid.setItems(listaMultimedia);
    }

    // Lógica para agregar elemento
    private void agregarMultimedia() {
        String titulo = tituloField.getValue().trim();
        String genero = generoCombo.getValue();
        Integer calificacion = calificacionField.getValue();

        // Validaciones
        if (titulo.isEmpty() || genero == null || calificacion == null || calificacion < 1 || calificacion > 5) {
            Notification.show("Por favor, completa todos los campos correctamente.");
            return;
        }

        String descripcion = descripcionField.getValue();
        String url = urlMediaField.getValue();

        // Crear y agregar a la lista
        MultimediaItem nuevo = new MultimediaItem(titulo, genero, calificacion, prestadoCheckbox.getValue(), descripcion, url);
        listaMultimedia.add(nuevo);
        grid.setItems(listaMultimedia);

        // Limpiar campos
        tituloField.clear();
        generoCombo.clear();
        calificacionField.clear();
        prestadoCheckbox.clear();
        descripcionField.clear();
        Notification.show("Elemento agregado exitosamente");
    }

    // Extraer ID de YouTube
    private String extraerYoutubeId(String url) {
        if (url.contains("watch?v=")) {
            return url.substring(url.indexOf("v=") + 2).split("&")[0];
        } else if (url.contains("youtu.be/")) {
            return url.substring(url.indexOf("youtu.be/") + 9);
        }
        return "";
    }

    // Filtro por género
    private void aplicarFiltroGenero(String generoSeleccionado) {
        if (generoSeleccionado == null || generoSeleccionado.isEmpty()) {
            grid.setItems(listaMultimedia);
        } else {
            List<MultimediaItem> filtrados = listaMultimedia.stream()
                .filter(item -> item.getGenero().equalsIgnoreCase(generoSeleccionado))
                .toList();
            grid.setItems(filtrados);
        }
    }
}
